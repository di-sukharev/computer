/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Здесь нужно написать код, который будет работать 🌞

    // handling whether we save to A register new value from instruction A or simply ALU out from A = comp ; jmp
    Not(in=instruction[15], out=isAinstruction); // if 15 bit is 0 -> it's A instruction, so it is 1 in NOT gate
    Mux16(a=ALUoutput, b=instruction, sel=isAinstruction, out=ALUoutORnewInstruction);

    // A Register is loaded in 2 cases: A instruction is running or d1 is enabled, d1 = instruction[5]
    Or(a=isAinstruction, b=instruction[5], out=AregisterLOAD);
    ARegister(in=ALUoutORnewInstruction, load=AregisterLOAD, out=outA, out[0..14]=addressM);
    
    // D register is loaded when d2 bit is enabled and instruction is C, d2 = instruction[4]
    And(a=instruction[15], b=instruction[4], out=DregisterLOAD);
    DRegister(in=ALUoutput, load=DregisterLOAD, out=outD);

    // Input Y of the ALU, either A reg value or M reg value
    And(a=instruction[15], b=instruction[12], out=AorMload);
    Mux16(a=outA, b=inM, sel=AorMload, out=AorMregister);

    ALU(x=outD,
        y=AorMregister,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=ALUoutput,
        zr=zero,
        ng=negative
     );

    // if this is the C instruction and dest has M bit which is intsruction[3] -> writeM is enabled
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC bits
    Not(in=zero, out=notZR);
    Not(in=negative, out=notNG);
    And(a=notZR, b=notNG, out=positive);

    And(a=instruction[0], b=instruction[15], out=jump1);
    And(a=instruction[1], b=instruction[15], out=jump2);
    And(a=instruction[2], b=instruction[15], out=jump3);

    And(a=jump1, b=positive, out=JGT);
    And(a=jump2, b=zero, out=JEQ);
    And(a=jump3, b=negative, out=JLT);

    Or(a=JGT, b=JEQ, out=JGE);
    Or(a=JGE, b=JLT, out=PCload);

    // load = f(jump bits, ALU control outputs)
    // 1. no jump: PC++ <-> jjj=000 --- 2. goto: PC=a <-> jjj=111 --- 3. conditional goto: PC = cond === true ? A : PC++
    PC(in=outA, load=PCload, inc=true, reset=reset, out[0..14]=pc);
}