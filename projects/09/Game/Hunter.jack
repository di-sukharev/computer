class Player {

    field Labirinth labirinth;
    field Avatar avatar;
    field Moover moover;

    field int direction;
    field boolean isMoving;

    field int speed, width, height;

    field Cell currentCell, nextCell;

    constructor(Labirinth l) {
        var int centerOfCellX, centerOfCellY;
        var Cell startCell;

        let labirinth = l;

        let startCell = labirinth.getCellFromRowCol(0, 0);

        let speed = 4;
        let width = 10;
        let height = 10;

        let centerOfCellX = startCell.getX() + (startCell.getWidth() / 2) - (width / 2);
        let centerOfCellY = startCell.getY() + (startCell.getHeight() / 2) - (height / 2);

        let avatar = Avatar.new(centerOfCellX, centerOfCellY, speed, width, height)
        let moover = Moover.new(labirinth, avatar);

        return this;
    }

    method void render() {
        do avatar.render();

        return;
    }

   method void move() {
        
        while(~isMoving) { do _setHunterDirection(); let isMoving = true; }

        do moover.move(direction);

        if (_hasHunterMoved()) { let isMoving = false; }

        return;
    }

    method void _setHunterDirection() {
        var boolean isWallInThatDirection;

        let currentCell = labirinth.getCurrentCell(avatar);

        let isWallInThatDirection = true;
        while(isWallInThatDirection) {
            let direction = LCGRandom.randRange(1, 4);
            let nextCell = labirinth.getCellFromDirection(avatar, direction)

            if (~nextCell = null) {
                let isWallInThatDirection = (
                    (currentCell.getBorder() = direction) |
                    (nextCell.getBorder() = Labirinth.getParallerWall(direction))
                )
            }
        }

        return;
    }

    method boolean _hasHunterMoved() {
        var boolean centerOfAvatarIsInTheCenterOfNextCell;

        let currentCell = labirinth.getCurrentCell(avatar);

        let centerOfAvatarIsInTheCenterOfNextCell =
            (currentCell = nextCell) &
            ((avatar.getX() + (avatar.getWidth() / 2)) = (nextCell.getX() + (nextCell.getWidth() / 2))) &
            ((avatar.getY() + (avatar.getHeight() / 2)) = (nextCell.getY() + (nextCell.getHeight() / 2)));

        return centerOfAvatarIsInTheCenterOfNextCell;
    }

     method int _defineDirection() {
        var int direction;

        var char keyCode;

        let keyCode = Keyboard.keyPressed();

        let direction = 0; // no keyIs pressed

        if (keyCode = 130) { let direction = 1; } // left arrow
        if (keyCode = 131) { let direction = 2; } // up arrow
        if (keyCode = 132) { let direction = 3; } // right arrow
        if (keyCode = 133) { let direction = 4; } // down arrow

        return direction;
    }
}