class Hunter {

    field Avatar avatar;
    field Moover moover;
    field Labirinth labirinth;

    field int speed, width, height;

    field int direction;
    field boolean isMoving;

    field Cell currentCell, nextBlock;

    constructor Hunter new(Labirinth usedLabirinth) {
        var int centerOfBlockX, centerOfBlockY;
        var Cell startBlock;

        let labirinth = usedLabirinth;

        let startBlock = labirinth.getCellFromRowCol(0, 0);

        let speed = 2;
        
        let width = 10;
        let height = 10;

        let centerOfBlockX = startBlock.getX() + (startBlock.getWidth() / 2) - (width / 2);
        let centerOfBlockY = startBlock.getY() + (startBlock.getHeight() / 2) - (height / 2);
        let avatar = Avatar.new(centerOfBlockX, centerOfBlockY, speed, width, height);
        let moover = Moover.new(labirinth, avatar);

        return this;
    }

    method void move() {
        if (~isMoving) { do _setHunterDirection(); let isMoving = true; }

        do moover.move(direction);

        if (_hasHunterMoved()) { let isMoving = false; }

        return;
    }

    method void _setHunterDirection() {
        var boolean isWallInThatDirection;

        let isWallInThatDirection = true;

        let currentCell = labirinth.getCurrentCell(avatar);

        while(isWallInThatDirection) {
            let direction = LCGRandom.randRange(1,4);
            let nextBlock = labirinth.getCellFromDirection(avatar, direction);
            
            if (~(nextBlock = null)) {
                let isWallInThatDirection = (
                    (currentCell.getBorder() = direction)
                    | (nextBlock.getBorder() = labirinth.getParallelWall(direction))
                    );
            }
        }

        return;
    }

    method boolean _hasHunterMoved() {
        var boolean centerOfAvatarIsInCenterOfTheNextBlock;

        let currentCell = labirinth.getCurrentCell(avatar);

        let centerOfAvatarIsInCenterOfTheNextBlock =
            (currentCell = nextBlock)
            & ((avatar.getX() + (avatar.getWidth() / 2)) = (nextBlock.getX() + (nextBlock.getWidth() / 2)))
            & ((avatar.getY() + (avatar.getHeight() / 2)) = (nextBlock.getY() + (nextBlock.getHeight() / 2)));

        return centerOfAvatarIsInCenterOfTheNextBlock;
    }

    method void destroy() {
        do avatar.destroy();
        
        do Memory.deAlloc(this);
        
        return;
    }

    method int getSpeed() {
        return speed;
    }
    
    method int getWidth() {
        return width;
    }
    
    method int getHeight() {
        return height;
    }
}