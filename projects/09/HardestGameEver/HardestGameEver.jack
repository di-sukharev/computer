class HardestGameEver {

    field Avatar player;
    field Moover playerMoover;
    
    field Avatar hunter;
    field Moover hunterMoover;

    field Labirinth labirinth;

    constructor HardestGameEver new() {
        var int playerSpeed;
        var int playerSize;
        var int playerStartPositionX, playerStartPositionY;
    
        var int hunterSpeed;
        var int hunterWidth, hunterHeight;
        var int hunterStartPositionX, hunterStartPositionY;

        var int labirinthRows, labirinthCols;
        var Cell startBlock;

        let labirinthRows = 16;
        let labirinthCols = 16;

        let labirinth = Labirinth.new(labirinthRows, labirinthCols);
        let startBlock = labirinth.getBlockFromRowCol(0, 0);

        let playerSpeed = 2;
        let playerSize = 5;
        let playerStartPositionX = startBlock.getX() + (startBlock.getWidth() / 2) - (playerSize / 2);
        let playerStartPositionY = startBlock.getY() + (startBlock.getHeight() / 2) - (playerSize / 2);
        let player = Avatar.new(playerStartPositionX, playerStartPositionY, playerSpeed, playerSize, playerSize);
        let playerMoover = Moover.new(labirinth, player);

        let hunterSpeed = playerSpeed * 2;
        let hunterWidth = playerSize * 2;
        let hunterHeight = playerSize * 2;
        let hunterStartPositionX = startBlock.getX() + (startBlock.getWidth() / 2) - (hunterWidth / 2);
        let hunterStartPositionY = startBlock.getY() + (startBlock.getHeight() / 2) - (hunterHeight / 2);
        let hunter = Avatar.new(hunterStartPositionX, hunterStartPositionY, hunterSpeed, hunterWidth, hunterHeight);
        let hunterMoover = Moover.new(labirinth, hunter);

        return this;
    }

    method void run() {
        
        var boolean doesUserWantToExit;
        let doesUserWantToExit = false;

        do initialize();

        while (~doesUserWantToExit) {
            do play();

            let doesUserWantToExit = checkIfUserWantsToExit();
        }

        do destroy();

        return;
    }

    method void initialize() {
        do player.render();
        do labirinth.render();
        
        return;
    }

    method void destroy() {
        do labirinth.destroy();
        do player.destroy();
        
        do Memory.deAlloc(this);
        
        return;
    }

    method boolean checkIfUserWantsToExit() {
        var char keyPressed;
        var boolean exit;

        let keyPressed = Keyboard.keyPressed();
        let exit = false;
      
        if (keyPressed = 81)  { let exit = true; } // q key

        return exit;
    }

    method void play() {
        do movePlayer();
        do moveHunter();
        
        return;
    }

    method void movePlayer() {
        var int direction;

        let direction = _getPlayerDirection();

        do playerMoover.move(direction);
        
        return;
    }

    method void moveHunter() {
        // var int direction;

        // let direction = _getHunterDirection();

        do hunterMoover.moveToClosestBlock();
        
        return;
    }

    method int _getPlayerDirection() {
        var int direction;
        var char keyPressed;        
        let keyPressed = Keyboard.keyPressed();

        if (keyPressed = 0)   { let direction = 0; }   // no key is pressed
        if (keyPressed = 130) { let direction = 1; }   // left arrow
        if (keyPressed = 131) { let direction = 2; }   // up arrow
        if (keyPressed = 132) { let direction = 3; }   // right arrow
        if (keyPressed = 133) { let direction = 4; }   // down arrow

        return direction;
    }

    method int _getHunterDirection() {
        var int direction;

        let direction = LCGRandom.randRange(1, 4);

        return direction;
    }

}