class HardestGameEver {

    field Avatar player;
    
    field Avatar hunter;
    
    field Labirinth labirinth;

    constructor HardestGameEver new() {
        var int playerSpeed;
        var int playerSize;

        var int hunterSpeed;
        var int hunterSize;

        let playerSpeed = 2;
        let playerSize = 5;
        let player = Avatar.new(0,0, playerSpeed, playerSize);

        let hunterSpeed = playerSpeed * 2;
        let hunterSize = playerSize * 2;
        let hunter = Avatar.new(0,0, hunterSpeed, hunterSize);

        let labirinth = Labirinth.new();

        return this;

    }

    method void run() {
        
        var boolean doesUserWantToExit;
        let doesUserWantToExit = false;

        do initialize();

        while (~doesUserWantToExit) {
            do play();

            let doesUserWantToExit = checkIfUserWantsToExit();
        }

        do destroy();

        return;
    }

    method void initialize() {
        do player.render();
        do labirinth.render();
        
        return;
    }

    method void destroy() {
        do labirinth.destroy();
        do player.destroy();
        
        do Memory.deAlloc(this);
        
        return;
    }

    method boolean checkIfUserWantsToExit() {
        var char keyPressed;
        var boolean exit;

        let keyPressed = Keyboard.keyPressed();
        let exit = false;
      
        if (keyPressed = 81)  { let exit = true; } // q key

        return exit;
    }

    method void play() {
        do movePlayer();
        // do moveHunter();
        return;
    }

    method void movePlayer() {
        var int direction;

        let direction = _getPlayerDirection();

        do Moover.move(labirinth, player, direction);
        
        return;
    }

    method void moveHunter() {
        var int direction;

        let direction = _getHunterDirection();

        do Moover.move(labirinth, hunter, direction);
        
        return;
    }

    method int _getPlayerDirection() {
        var int direction;
        var char keyPressed;        
        let keyPressed = Keyboard.keyPressed();

        if (keyPressed = 0)   { let direction = 0; }   // no key is pressed
        if (keyPressed = 130) { let direction = 1; }   // left arrow
        if (keyPressed = 131) { let direction = 2; }   // up arrow
        if (keyPressed = 132) { let direction = 3; }   // right arrow
        if (keyPressed = 133) { let direction = 4; }   // down arrow

        return direction;
    }

    method int _getHunterDirection() {
        var int direction;

        let direction = LCGRandom.randRange(1, 4);

        return direction;
    }

}