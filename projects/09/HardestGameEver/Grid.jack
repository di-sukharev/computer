class Grid {
    field Array matrix;
    field int rows, cols;
    field int cellWidth, cellHeight;

    constructor Grid new(int r, int c) {
        let rows = r;
        let cols = c;

        let cellHeight = 256 / rows; // screen is 256 pixels height
        let cellWidth = 512 / cols; // screen is 512 pixels width

        do _createMatrix();

        return this;
    }

    method void _createMatrix() {
        var Array row;
        var Cell cell;
        var int i, j; // matrix rows and cols iterator
        
        // fill matrix with rows*cols matrix
        let matrix = Array.new(rows);

        let i = 0;
        while (i < rows) {
        
            let matrix[i] = Array.new(cols);
    
            let j = 0;
            while (j < cols) {

                let row = matrix[i];

                let row[j] = Cell.new();

                let cell = row[j];

                do cell.generateBorder();
                do renderCellInGrid(cell, i, j);

                let j = j + 1;
            }
            let i = i + 1;
        }

        return;
    }

    method void renderCellInGrid(Cell cell, int row, int col) {
        var int x, y; // coordinates of cell on the screen
        var int wall;

        do Debugger.log("row", row);
        do Debugger.log("col", col);

        let x = row * cellWidth;
        let y = col * cellHeight;

        let wall = cell.getBorder();

        do Debugger.log("x", x);
        do Debugger.log("y", y);

        if (x = 448) { let x = 447; }
        
        if (y = 224) { let y = 223; }

        if (wall = 1) { do Screen.drawLine(x, y, x + cellWidth, y); } // top wall
        if (wall = 2) { do Screen.drawLine(x + cellWidth, y, x + cellWidth, y + cellHeight); } // right wall
        if (wall = 3) { do Screen.drawLine(x, y + cellHeight, x + cellWidth, y + cellHeight); } // bottom wall
        if (wall = 4) { do Screen.drawLine(x, y, x, y + cellHeight); } // left wall

        return;
    }

    method void destroy() {
        do matrix.dispose();     
        // do cells.dispose // memory leak here!!!
        do Memory.deAlloc(this);
        
        return;
    }
}