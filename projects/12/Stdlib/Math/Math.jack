// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */

class Math {
    static Array bits;
    
    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        let bits[0] = 1; // 00…01
        let bits[1] = 2; // 00…10
        let bits[2] = 4; // 00…100
        let bits[3] = 8; // 00…1000
        let bits[4] = 16;// 00…10000
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384; // with 32768 compiler returns the error: 'Integer constant too big'
        
        return;
    }

    function int twoToThePowerOf(int n) {
        return bits[n];
    }

    function boolean bit(int x, int n) {
        return ~((x & Math.twoToThePowerOf(n)) = 0);
    }
    
    /** Returns the absolute value of x. */
    function int abs(int x) {
        if( x < 0 ) { let x = -x; }
        return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        var int i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while( i < 16 ) {   // 16-bit numbers
            if(Math.bit(y, i)) { let sum = sum + shiftedX; }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }
    
    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int isXnegative, isYnegative;
        var int q;
        var int result;
        
        let isXnegative = x < 0;
        let isYnegative = y < 0;

        let x = Math.abs(x);
        let y = Math.abs(y);

        if( y > x ) { return 0; }
        
        let q = Math.divide(x, y+y);

        if( x-(2*q*y) < y ) { let result = q+q; }
        else { let result = q+q+1; }
        
        if( isXnegative | isYnegative ) { let result = -result; }
        
        return result;
    }
    
    /** Returns the remainder part of x/y */
    function int mod(int x, int y) {
        var int q;
        
        let q = Math.divide(x, y);
        return x - (q*y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y;
        var int yPlusTwoToTheIth; // same as "y + 2^i"
        var int yPlusTwoToTheIth_squared; // same as "(y + 2^i)^2"
        
        let y = 0;
        let i = 7; // bits / 2 - 1 = 7, bits = 16 because we have 16 bit system

        while( (i > 0) | (i = 0) ) {
            let yPlusTwoToTheIth = y + Math.twoToThePowerOf(i);
            let yPlusTwoToTheIth_squared = yPlusTwoToTheIth * yPlusTwoToTheIth;

            // in case of overflow
            if( ~(yPlusTwoToTheIth_squared > x) & (yPlusTwoToTheIth_squared > 0) ) { let y = yPlusTwoToTheIth; }

            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if( a > b ) { return a; }
        else { return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if( a < b ) { return a; }
        else { return b; }
    }
}