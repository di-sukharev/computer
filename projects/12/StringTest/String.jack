// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/*   * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array buffer;
    field int bufferLength;
    field int stringLength;

    /*  Constructs a new empty string with a maximum length of maxLength
        and initial length of 0. */
    constructor String new(int maxLength) {
        let buffer = Array.new(maxLength);

        let bufferLength = maxLength;
        let stringLength = 0;

        return this;
    }

    /*  Disposes this string. */
    method void dispose() {
        do buffer.dispose();

        return;
    }

    /*  Returns the current length of this string. */
    method int length() {
        return stringLength;
    }

    /*  Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buffer[j];
    }

    /*  Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buffer[j] = c;

        return;
    }

    /*  Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (stringLength < bufferLength) {
            let buffer[stringLength] = c;
            let stringLength = stringLength + 1;
        }

        return this;
    }

    /*  Erases the last character from this string. */
    method void eraseLastChar() {
        if( stringLength > 0 ) { let stringLength = stringLength - 1; }

        return;
    }

    /*  Returns the integer value of this string, 
        until a non-digit character is detected. */
    method int intValue() {
        var int intVal;

        while( (i < stringLength) & String.isInt(buffer[i]) ) {
            let intVal = (intVal * 10) + String.intVal(buffer[i]);
            let i = i + 1;
        }

        return intVal;
    }

     /** 48 <= ascii(c) <= 57 is digit*/
    function boolean isInt(char c){
        return ~(c < 48) & ~(c > 57);
    }

    /*  Returns the char value of the given integer,
        must have 0 <= i <= 9 */
    function char intToChar(int i) {
        return i + 48;
    }

    /*  Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    }

    /*  Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /*  Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /*  Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
