// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;

    static boolean color; // true is black, false is white

    /** Initializes the Screen. */
    function void init() {
        let screen = 0;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while(i < 8192) { let screen[i] = 0; } // 0 is white

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean clr) {
        let color = clr;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit;

        let address = (32 * y) + (x / 16);

        let bit = Math.mod(x, 16); // find the remainder of x/16
        let bit = Math.twoToThePowerOf(bit); // generate

        let value = Memory.peek(16384 + address); // 16384 is the SCREEN MEMORY MAP base address
        
        if (color) {
            // seting value[bit] to black
            let value = value | bit; 
        } else {
            // seting value[bit] to white
            let value = value & ~bit;
        }
        
        let screen[address] = value;

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy;
        
        let x = x1;
        let y = y1;
	    let dx = x2 - x1; // delta x
	    let dy = y2 - y1; // delta y

	    
	
        return;
    }

    function void drawHorizontalLine(int x, int y, int dx, int dy) {
        var boolean northEast, southEast;

        // line direction
        let northEast = false; let southEast = false;

        if (dy < 0) { let northEast = true; }
        else { let southEast = true; }

       
        
    }

    function void drawSouthEastLine() {
        var int right, stepsDown, diff;

        var boolean horizontalPartIsDrawn, verticalPartIsDrawn;

        let right = 0; // pixels we went right
	    let down = 0; // pixels we went down
	    let diff = 0; // are we overshooting or undershooting the line coordinates
        
        let pixelsLeftToDrawHorizontally = (right < dx) | (right = dx);
        let pixelsLeftToDrawVertically = (down < dy) | (down = dy);

        // algorithm: while( (right ≤ dx) & (down ≤ dy) ) right++ OR down++
    	while ((pixelsLeftToDrawHorizontally) & (pixelsLeftToDrawVertically)) {
		    do Screen.drawPixel(x + right, y + down);

            let diff = ((right*dy) – (down*dx));

            if (diff < 0) { let right=right+1; let diff=diff+dy; }
            else { let down=down+1; let diff=diff-dx; }
        }

        return;
    }

    function void drawNorthEastLine() {
        var int right, stepsUp, diff;

        var boolean horizontalPartIsDrawn, verticalPartIsDrawn;

        let right = 0; // pixels we went right
	    let up = 0; // pixels we went up
	    let diff = 0; // are we overshooting or undershooting the line coordinates

        let pixelsLeftToDrawHorizontally = (right < dx) | (right = dx);
        let pixelsLeftToDrawVertically = (up > dy) | (up = dy);

        // algorithm: while( (right ≤ dx) & (up >= dy) ) right++ OR up++
    	while ((pixelsLeftToDrawHorizontally) & (pixelsLeftToDrawVertically)) {
		    do Screen.drawPixel(x + right, y - up);

            let diff = ((right*dy) – (up*dx));

            if (diff < 0) { let right=right+1; let diff=diff+dy; }
            else { let up=up+1; let diff=diff-dx; }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {

        return;
    }
}
