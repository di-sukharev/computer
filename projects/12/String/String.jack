// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/*   * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int maximumLength;
    field int length;

    /*  Constructs a new empty string with a maximum length of maxLength
        and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;

        if (maxLength = 0) { let maxLength = 1; }
        
        let chars = Array.new(maxLength);
        let maximumLength = maxLength;

        return this;
    }

    /*  Disposes this string. */
    method void dispose() {
        do chars.dispose();

        return;
    }

    /*  Returns the current length of this string. */
    method int length() {
        return length;
    }

    /*  Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /*  Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;

        return;
    }

    /*  Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maximumLength) {
            let chars[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /*  Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0) { let length = length - 1; }

        return;
    }

    /*  Returns the integer value of this string, 
        until a non-digit character is detected. */
    method int intValue() {
        var int intVal, i;
        var boolean negative;

        if ((length > 0) & (chars[0] = 45)) {
            let negative = true;
            let i = 1;
        } else {
            let negative = false;
            let i = 0;
        }

        while((i < length) & String.isInt(chars[i])) {
            let intVal = (intVal * 10) + String.charToInt(chars[i]);
            let i = i + 1;
        }

        if (negative) { return -intVal; }
        else { return intVal; }
    }

     /** 48 <= ascii(c) <= 57 is integer */
    function boolean isInt(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /*  Returns the integer value of the given char,
        must be called after isInt */
    function char charToInt(char c) {
        return c - 48;
    }

    /*  Sets this string to hold a representation of the given value.
        e.g setInt(31284) returns "31284"
    */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45); // 45 is - symbol (minus)
        }

        do setIntHelper(val);

        return;
    }

    method void setIntHelper(int val) {
        var int nextInt;
        
        if (val < 10) { do appendChar(String.intToChar(val)); }
        else { 
            let nextInt = val / 10;

            do setIntHelper(nextInt);
            do appendChar(String.intToChar(val - (nextInt * 10)));
        }

        return;
    }

    /*  Returns the char value of the given integer,
        must have 0 <= i <= 9 */
    function char intToChar(int i) {
        return i + 48;
    }

    /*  Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /*  Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /*  Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
