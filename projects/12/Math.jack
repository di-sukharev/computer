// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static int twoToThePowerOf;
    
    /** Initializes the library. */
    function void init() {
        let twoToThePowerOf = Array.new(16);
        let twoToThePowerOf[0] = 1;
        let twoToThePowerOf[1] = 2;
        let twoToThePowerOf[2] = 4;
        let twoToThePowerOf[3] = 8;
        let twoToThePowerOf[4] = 16;
        let twoToThePowerOf[5] = 32;
        let twoToThePowerOf[6] = 64;
        let twoToThePowerOf[7] = 128;
        let twoToThePowerOf[8] = 256;
        let twoToThePowerOf[9] = 512;
        let twoToThePowerOf[10] = 1024;
        let twoToThePowerOf[11] = 2048;
        let twoToThePowerOf[12] = 4096;
        let twoToThePowerOf[13] = 8192;
        let twoToThePowerOf[14] = 16384;
        let twoToThePowerOf[15] = 16384+16384; // with 32768, compiler return error 'Integer constant too big'
        
        return;
    }

    function boolean bit(int x, int n) {
        return ~((x & Math.twoToThePowerOf[n]) = 0);
    }
    
    /** Returns the absolute value of x. */
    function int abs(int x) {
        if( x < 0 ) { let x = -x; }
        return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        var int i;
        
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while( i < 16 ) {   // 16-bit numbers
            if(Math.bit(y, i)) { let sum = sum + shiftedX; }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }
    
    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int isXnegative, isYnegative;
        var int q;
        var int result;
        
        let x = Math.abs(x);
        let y = Math.abs(y);

        if( y > x ) { return 0; }
        
        let q = Math.divide(x, y+y);

        if( x-(2*q*y) < y ) { let result = q+q; }
        else { let result = q+q+1; }
        
        let isXnegative = x < 0;
        let isYnegative = y < 0;
        
        if( isXnegative | isYnegative ) { let result = -result; }
        
        return result;
    }
    
    /** Returns the remainder part of x/y */
    function int mod(int x, int y) {
        var int q;
        
        let q = Math.divide(x, y);
        return x - (q*y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y;
        var int temp;
        var int temp_squared;
        
        let y = 0;
        let i = 7; // = #bits / 2 - 1

        while( ~(i < 0) ) {
            let temp = y + Math.twoToThePowerOf[i];
            let temp_squared = temp * temp;

            // in case of overflow
            if( ~(temp_squared > x) & (temp_squared > 0) ) {
                let y = temp;
            }

            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if( a > b ) { return a; }
        else { return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if( a < b ) { return a; }
        else { return b; }
    }
}