/*
    1-–±–∏—Ç–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä

    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    –µ—Å–ª–∏ load[t] == 1, —Ç–æ–≥–¥–∞: out[t+1] = in[t]
                       –∏–Ω–∞—á–µ out –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è: out[t+1] = out[t]
    –≥–¥–µ t ‚Äî —Ç–µ–∫—É—â–∏–π —Ç–∞–∫—Ç, –∞ t+1 ‚Äî —Å–ª–µ–¥—É—â–∏–π —Ç–∞–∫—Ç.
*/

CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
        // –î–æ–ø–∏—à–∏—Ç–µ HDL –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ —á–∏–ø–∞.
        // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DFF –∏ –º—É–ª—å—Ç–∏–ø–ª–µ—Å–æ—Ä.
        DFF(in=_, out=_, out=_)
}

/*
    üåû –ü–æ–¥—Å–∫–∞–∑–∫–∞ üåû

    –ß—Ç–æ–±—ã —Ä–∞–∑–¥–≤–æ–∏—Ç—å –∞—É—Ç–ø—É—Ç, –¥–æ–±–∞–≤—å—Ç–µ –≤ —á–∏–ø –µ—â–µ –æ–¥–∏–Ω out –ø–∏–Ω:
    DFF(in=input, out=–ø–µ—Ä–≤—ã–π_–∞—É—Ç–ø—É—Ç, out=–≤—Ç–æ—Ä–æ–π_–∞—É—Ç–ø—É—Ç);

    –ó–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π –∞—É—Ç–ø—É—Ç –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ out,
    –∞ –≤—Ç–æ—Ä–æ–π –∞—É—Ç–ø—É—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä.
*/

/*
    –ß–∏—Ç–∞–π—Ç–µ –≥–ª–∞–≤—É —É—á–µ–±–Ω–∏–∫–∞ –ø—Ä–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏–ø—ã:
    https://www.notion.so/sukharev/III-sequential-logic-e2f1d301c11b4df7ada329b2afd4478c

    –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–ø–µ:
    https://t.me/sukharev_qa
*/