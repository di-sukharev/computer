// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // --- x circuit flags --- start
        // if «zx» = 1 ? pass false (0000) : x
        Mux16(a=x, b=false, sel=zx, out=zxMUX);
        // if «nx» = 1 ? pass !x : x
        Not16(in=zxMUX, out=zxMUXNOT);
        Mux16(a=zxMUX, b=zxMUXNOT, sel=nx, out=nxMUX);
        // --- x circuit flags --- end

        /// --- below as above: doing all same logic for y[16] input as we did for x[16] ---

        // --- y circuit flags --- start
        // if «zy» = 1 ? pass false (0000) : y
        Mux16(a=y, b=false, sel=zy, out=zyMUX);
        // if «ny» = 1 ? pass !y : y
        Not16(in=zyMUX, out=zyMUXNOT);
        Mux16(a=zyMUX, b=zyMUXNOT, sel=ny, out=nyMUX);
        // --- x circuit flags --- end

        // --- middle part --- start
        // passing «x» and «y» to «x+y» and «x&y» gate, later we will pass it through Mux to have a single out (+ or & result)
        Add16(a=nxMUX, b=nyMUX, out=xADDy);
        And16(a=nxMUX, b=nyMUX, out=xANDy);
        // passing both «x+y» and «x&y» to Mux gate to implement the «f» flag functionality
        Mux16(a=xANDy, b=xADDy, sel=f, out=outMUXED);
        // --- middle part --- end

        // negating the «no» flag with
        Not16(in=outMUXED, out=outNOT);
        Mux16(
            a=outMUXED,
            b=outNOT,
            sel=no,
            out=out,
            out[15]=ng,
            out[0..7]=outFirst8Bits,
            out[8..15]=outSecond8bits
        );
        // ---

        // --- zr output flags --- start
        Or8Way(in=outFirst8Bits, out=zrFirst8bits);
        Or8Way(in=outSecond8bits, out=zrSecond8bits);
        Or(a=zrFirst8bits, b=zrSecond8bits, out=zrOR);
        Not(in=zrOR, out=zr);
        // --- zr output flags --- end
}